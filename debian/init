#!/bin/bash

### BEGIN INIT INFO
# Provides:          linuxmuster-base
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Should-Start:      
# Should-Stop:       
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: internal firewall script
# Description:       starts and stops internal firewall
### END INIT INFO

#
# Thomas Schmitt <thomas@linuxmuster.net>
# 15.05.2013
# GPL v3
#

# source default settings
[ -f /etc/default/linuxmuster-base ] && . /etc/default/linuxmuster-base

# check if we are allowed to start
[ "$START_LINUXMUSTER" = "yes" ] || exit 0

# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit 1

# source helperfunctions
. $HELPERFUNCTIONS || exit 1

# create $BLOCKEDHOSTSINTRANET if necessary
[ -e "$BLOCKEDHOSTSINTRANET" ] || touch $BLOCKEDHOSTSINTRANET

# file which saves the fw rules
IPTRULES="$CACHEDIR/iptables"

# check if we were called on boot
echo "$0" | grep -q ^/etc/rc && ONBOOT=yes


# read macs and ports etc. for fw start|reload
read_fwdata(){

 # maximum ports for iptables multiport list
 local max_ports=15
 local m
 local n
 local nr_ports
 local nr_portranges
 local p
 local portfile
 local portlist
 local proto
 local summary

 # get all ip addresses
 IPS="$(grep -v ^# $WIMPORTDATA | awk -F\; '{ print $5 }' | tr a-z A-Z)"
 
 # remove orphaned ips from blocked hosts intranet list
 if [ -s "$BLOCKEDHOSTSINTRANET" ]; then
  for i in $(cat $BLOCKEDHOSTSINTRANET); do
   echo "$IPS" | grep -wq "$i" || sed "/$i/d" -i $BLOCKEDHOSTSINTRANET
  done
 fi

 # get blocked ips
 BLOCKED_IPS="$(cat $BLOCKEDHOSTSINTRANET)"

 # get unblocked ips
 UNBLOCKED_IPS=""
 if [ -n "$BLOCKED_IPS" ]; then
  for u in $IPS; do
   for b in $BLOCKED_IPS; do
    [ "$u" = "$b" ] && continue
    if [ -z "$UNBLOCKED_IPS" ]; then
     UNBLOCKED_IPS="$u"
    else
     UNBLOCKED_IPS="$UNBLOCKED_IPS $u"
    fi
    break
   done
  done
 fi

 # read firewall port definitions
 for portfile in $ALLOWEDPORTS $BASEPORTS $BLOCKEDPORTS; do
  # assemble all chain data in summary variable
  case $(basename $portfile) in
   allowed*) summary="ALLOWED" ;;
   base*) summary="BASE" ;;
   blocked*) summary="BLOCKED" ;;
   *) ;;
  esac
  # iterate over protocols
  for proto in tcp udp; do
   # get list of ports per protocol
   portlist="$(grep -i ^$proto $portfile | awk '{ print $2 }')"
   # next round if no ports in list
   [ -z "$portlist" ] && continue
   # change spaces to kommas in portlist
   portlist="$(echo $portlist | sed 's| |,|g')"
   # get number of ports in list
   nr_ports="$(echo $portlist | sed 's|,| |g' | wc -w)"
   # get number of portranges in list (contains :)
   nr_portranges="$(echo $portlist | grep -o ":" | wc -l)"
   # add numbers of single ports and portranges to get the effective number of ports
   nr_ports="$(($nr_ports + $nr_portranges))"
   # split portlist if there are more than max_ports defined
   if [ $nr_ports -gt $max_ports ]; then
    summary="$summary $proto"
    n=0
    for p in $(echo $portlist | sed 's|,| |g'); do
     if [ $n -eq 0 ]; then
      summary="$summary $p"
     else
      summary="$summary,$p"
     fi
     n=$(($n + 1))
     echo "$p" | grep -qo ":" && n=$(($n + 1))
     if [ $n -eq $max_ports -o $n -gt $max_ports ]; then
      n=0
      summary="$summary $proto"
     fi
    done
   else # less or equal number of ports
    summary="$summary $proto $portlist"
   fi
  done
  # save summary to according variable
  case $(basename $portfile) in
   allowed*) ALLOWEDPORTS_LIST="$summary" ;;
   base*) BASEPORTS_LIST="$summary" ;;
   blocked*) BLOCKEDPORTS_LIST="$summary" ;;
  esac
 done

 } # read_fwdata

 
save_rules(){
 local RC=0
 iptables-save > "$IPTRULES" ; RC="$?"
 if [ "$RC" != "0" ]; then
  echo " ... failed to save rules!"
  echo
  rm -f "$IPTRULES"
 fi
 return "$RC"
}


# save rules and flush iptables rules completely
flush_fw() {

 local RC=0
 local i

 # do only if there are rules
 if iptables -L IN-$IFACE &> /dev/null; then
  # save rules first
  save_rules ; RC="$?"
  # remove it all
  for i in ALLOWED BASE BLOCKED; do
   iptables -D IN-$IFACE -i $IFACE -j IN-$IFACE-$i
   iptables -F IN-$IFACE-$i
   iptables -X IN-$IFACE-$i
  done
  iptables -D INPUT -i $IFACE -j IN-$IFACE
  iptables -F IN-$IFACE
  iptables -X IN-$IFACE
 fi
 return "$RC"

} # flush_fw


stop_firewall() {

 local RC=0

 echo -n "Stopping internal firewall"
 flush_fw ; RC="$?"
 echo "."
 
 return "$RC"

} # stop_firewall

# create all chains and rules from scratch and write them to file
write_rulesfile() {

 read_fwdata

 local m
 local p
 local portlist
 local proto
 local RULE
 local TYPE

 # write header
 cat > "$IPTRULES" <<EOF
# Generated by linuxmuster-base on `date`
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:IN-$IFACE - [0:0]
:IN-$IFACE-ALLOWED - [0:0]
:IN-$IFACE-BASE - [0:0]
:IN-$IFACE-BLOCKED - [0:0]
-A INPUT -i $IFACE -j IN-$IFACE
-A IN-$IFACE -i $IFACE -j IN-$IFACE-BASE
-A IN-$IFACE -i $IFACE -j IN-$IFACE-ALLOWED
-A IN-$IFACE -i $IFACE -j IN-$IFACE-BLOCKED
-A IN-$IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT
-A IN-$IFACE -s $ipcopip/32 -j ACCEPT
-A IN-$IFACE ! -s $internalnet/$internmask_short -j ACCEPT
EOF

 # add custom rules before
 [ -r "$CUSTOMRULESBEFORE" ] && cat "$CUSTOMRULESBEFORE" >> "$IPTRULES"

 # write base, allowed and blocked chains
 for p in $BASEPORTS_LIST $ALLOWEDPORTS_LIST $BLOCKEDPORTS_LIST; do
  # get type of chain
  case "$p" in
   ALLOWED|BASE|BLOCKED) TYPE="$p" ; continue ;;
  esac
  # get protocol
  case "$p" in
   tcp|udp) proto="$p" ; continue ;;
  esac
  # get portlist
  portlist="$p"
  # write base chain
  if [ "$TYPE" = "BASE" ]; then
   RULE="-A IN-$IFACE-$TYPE -m $proto -p $proto -m multiport --dports $portlist -j ACCEPT"
   echo "$RULE" >> "$IPTRULES"
  else # write allowed and blocked chains
   for i in $IPS; do
   # for blocked chain use only ips which are not blocked
    if [ "$TYPE" = "BLOCKED" ]; then
     echo "$UNBLOCKED_IPS" | grep -qw "$i" || continue
    fi
    validip "$i" || continue
    RULE="-A IN-$IFACE-$TYPE -s $i -m $proto -p $proto -m multiport --dports $portlist -j ACCEPT"
    echo "$RULE" >> "$IPTRULES"
   done
  fi   
 done

 # add custom rules after
 [ -r "$CUSTOMRULESAFTER" ] && cat "$CUSTOMRULESAFTER" >> "$IPTRULES"
 
 # footer
 cat >> "$IPTRULES" <<EOF
-A IN-$IFACE -m icmp -p icmp --icmp-type 8 -j ACCEPT
-A IN-$IFACE -j REJECT --reject-with icmp-port-unreachable
COMMIT
# Completed on `date`
EOF

} # write_rulesfile


start_firewall() {

 echo -n "Starting internal firewall"
 
 if [ -n "$ONBOOT" -a -s "$IPTRULES" ]; then
  echo -n " on boot, loading saved file"
 else
  write_rulesfile
 fi
 
 if ! iptables-restore < "$IPTRULES"; then
  echo " ... failed to load $IPTRULES!"
  echo
  return 1
 fi
 
 echo "."

} # start_firewall


# it's a fake, restarting is fast enough
reload_firewall(){
 echo -n "Reloading internal firewall"
 stop_firewall &> /dev/null; RC="$?"
 if [ "$RC" = "0" ]; then
  start_firewall &> /dev/null ; RC="$?"
 fi
 if [ "$RC" = "0" ]; then
  echo "."
 else
  echo " ... failed!"
 fi
 return "$RC"
}

RC=0

case "$1" in

 start)
  start_firewall ; RC="$?"
  ;;

 stop)
  stop_firewall ; RC="$?"
  ;;

 restart)
  stop_firewall ; RC="$?"
  if [ "$RC" = "0" ]; then
   start_firewall ; RC="$?"
  fi
  ;;

  reload)
   reload_firewall ; RC="$?"
  ;;
  
 *)
  echo "Usage: $0 <start|stop|restart|reload>"
  ;;

esac

exit "$RC"
