#!/bin/bash
#
# linuxmuster-reset-rooms
# resets the internet, intranet, webfilter, lession state of rooms/hosts
#
# thomas@linuxmuster.net
# 28.02.2013
# GPL V3
#


# check for linuxmuster-reset-rooms lockfile
locker=/tmp/.linuxmuster-reset-rooms
if [ -e "$locker" ]; then
	echo "Caution! Lockfile $locker detected!"
	echo "Probably there is another linuxmuster-reset-rooms process running!"
	echo "If this is not the case you can safely remove the lockfile $locker"
        echo "and give linuxmuster-reset-rooms another try."
	exit 1
fi
touch $locker
chmod 400 $locker


exit_script() {
 local RC=1
 [ -n "$1" ] && RC="$1"
 echo | tee -a $LOGFILE
 echo "Ending linuxmuster-reset session at `date`" | tee -a $LOGFILE
 echo "#####################################################################" | tee -a $LOGFILE
 rm -f $locker $ROOMDEFAULTS_TEMP $WIMPORTDATA_TEMP
 exit "$RC"
}

# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit_script

# source helperfunctions
. $HELPERFUNCTIONS || exit_script

# logfile
LOGFILE="$LOGDIR/linuxmuster-reset.log"

# parsing parameters
getopt $*

usage() {
  echo
  echo "Usage: linuxmuster-reset --room=<roomname> [--kill]"
  echo "                         --host=<hostname>"
  echo "                         --all [--kill]"
  echo
  echo "--room : reset all hosts of this room."
  echo "--host : reset only this specific host."
  echo "--all  : reset all rooms and hosts defined in $ROOMDEFAULTS."
  echo "--kill : kill the room's active lession, if there is one (optional)."
  echo "         Use this with care!"
  echo
  echo "Note: --room and --host are using default values if room/host is not"
  echo "      defined in $ROOMDEFAULTS."
  exit_script
}

# test parameters
[[ -z "$room" && -z "$host" && -z "$all" ]] && usage
[[ -n "$room" && -n "$all" ]] && usage
[[ -n "$room" && -n "$host" ]] && usage
[[ -n "$host" && -n "$all" ]] && usage
[[ -n "$host" && -n "$kill" ]] && usage


# check if $ROOMDEFAULTS exists
if [ ! -e "$ROOMDEFAULTS" ]; then
	echo "Fatal: File $ROOMDEFAULTS not found!"
	exit_script
fi

# check for ipcop availability
if ! test_pwless_fw; then
 echo "Passwordless connection to firewall is not available!"
 exit_script
fi

# start
echo | tee -a $LOGFILE
echo "#####################################################################" | tee -a $LOGFILE
echo "Starting linuxmuster-reset session at `date`" | tee -a $LOGFILE
echo | tee -a $LOGFILE

# first convert all input files to lower case
ROOMDEFAULTS_TEMP=/var/tmp/room_defaults.$$
WIMPORTDATA_TEMP=/var/tmp/workstations.$$
grep -v ^# $ROOMDEFAULTS | tr A-Z a-z > $ROOMDEFAULTS_TEMP
grep -v ^# $WIMPORTDATA | tr A-Z a-z > $WIMPORTDATA_TEMP

# create resetlist
if [ -n "$all" ]; then
	resetlist=`awk '{ print $1 }' $ROOMDEFAULTS_TEMP`
elif [ -n "$host" ]; then
	resetlist=`echo $host | tr A-Z a-z`
elif [ -n "$room" ]; then
	resetlist=`echo $room | tr A-Z a-z`
	# fetch hosts for this room and look for host definitions in $ROOMDEFAULTS_TEMP
	hosts=`grep ^$room\; $WIMPORTDATA_TEMP | cut -f2 -d";"`
	if [ -n "$hosts" ]; then
		for h in $hosts; do
			grep -q ^$h[[:space:]] $ROOMDEFAULTS_TEMP && resetlist="$resetlist $h"
		done
	fi
fi


# check resetlist for valid entries and clean it up
for r in $resetlist; do

	# skip rooms or hosts which are named "default"
	[ "$r" = "default" ] && continue

	# check if room/host is defined in $WIMPORTDATA_TEMP
	if ! grep -qw $r $WIMPORTDATA_TEMP; then
		echo "Skipping room or host $r which is not defined in $WIMPORTDATA!" | tee -a $LOGFILE
		continue
	fi

	# create cleaned resetlist
	if [ -z "$tmplist" ]; then
		tmplist=$r
	else
		tmplist="$tmplist $r"
	fi

done


# exit if list is emtpy
if [ -z "$tmplist" ]; then
 echo "There are no valid rooms or hosts to reset!" | tee -a $LOGFILE
 exit_script 0
else
 resetlist=$tmplist
fi


# set overall default values
internet_default=on
intranet_default=on
webfilter_default=on

roomfile_prefix="/var/lib/schulkonsole/room_"


# read default values from $ROOMDEFAULTS_TEMP if set
if line=`grep ^default[[:space:]] $ROOMDEFAULTS_TEMP`; then
	internet_default=`echo $line | awk '{ print $2 }'`
	intranet_default=`echo $line | awk '{ print $3 }'`
	webfilter_default=`echo $line | awk '{ print $4 }'`
fi


# check for internal firewall
. /etc/default/linuxmuster-base || exit_script
if [ "$START_LINUXMUSTER" != "yes" ]; then
	echo "Internal firewall is deactivated!" | tee -a $LOGFILE
	skip_intra=yes
else
	if ! iptables -L | grep -q "$FIREWALLTEST"; then
		echo "Internal firewall is activated but not running!" | tee -a $LOGFILE
		skip_intra=yes
	fi
fi
[ -z "$skip_intra" ] && echo "Internal firewall is active!"


# check if urlfilter is active
$SCRIPTSDIR/check_urlfilter.sh && uf_active=yes


# processing resetlist
for r in $resetlist; do

	# check if $r is a room
	if grep -q ^$r\; $WIMPORTDATA_TEMP; then
		room=yes; typ=room; typm=Room
	else
		room=no; typ=host; typm=Host
	fi

	echo
	echo "Processing $typ $r ..." | tee -a $LOGFILE

	# check if room/host is defined in $ROOMDEFAULTS_TEMP
	if ! grep -q ^$r[[:space:]] $ROOMDEFAULTS_TEMP; then
		# if not use default values
		echo "  * $typm $r is not defined in $ROOMDEFAULTS_TEMP! Using default values!" | tee -a $LOGFILE
		internet=$internet_default
		intranet=$intranet_default
		webfilter=$webfilter_default
	else
		# else read room/host values from $ROOMDEFAULTS_TEMP
		line=`grep ^$r[[:space:]] $ROOMDEFAULTS_TEMP`
		internet=`echo $line | awk '{ print $2 }'`
		intranet=`echo $line | awk '{ print $3 }'`
		webfilter=`echo $line | awk '{ print $4 }'`
	fi

	if [ "$room" = "yes" ]; then
		# fetch room's hostlist from $WIMPORTDATA_TEMP
		hostlist=`grep ^$r\; $WIMPORTDATA_TEMP | cut -f2 -d\;`
		hostlist=`echo $hostlist | sed -e 's/ /,/g'`
		# skips if hostlist is empty
		if [ -z "$hostlist" ]; then
			echo "  * No hosts found for room $r! Skipping $r!" | tee -a $LOGFILE
			continue
		fi
	else
		hostlist=$r
	fi

	# triggers intranet access if internal firewall is active
	if [ -z "$skip_intra" ]; then
		if [[ "$intranet" = "on" || "$intranet" = "off" ]]; then
			echo -n "  * Changing intranet status to $intranet for $hostlist ... " | tee -a $LOGFILE
			$SCRIPTSDIR/intranet_on_off.sh --trigger=$intranet --hostlist=$hostlist | tee -a $LOGFILE
		else
			echo "  * Skipping intranet status change for $hostlist ..." | tee -a $LOGFILE
		fi
	else
		echo "  * Skipping intranet status change for $hostlist ..." | tee -a $LOGFILE
	fi

	# triggers internet access
	if [[ "$internet" = "on" || "$internet" = "off" ]]; then
		echo -n "  * Changing internet status to $internet for $hostlist ... " | tee -a $LOGFILE
		$SCRIPTSDIR/internet_on_off.sh --trigger=$internet --hostlist=$hostlist | tee -a $LOGFILE
	else
		echo "  * Skipping internet status change for $hostlist ..." | tee -a $LOGFILE
	fi

	# triggers urlfilter if active
	if [ -n "$uf_active" ]; then
		if [[ "$webfilter" = "on" || "$webfilter" = "off" ]]; then
			echo -n "  * Changing webfilter status to $webfilter for $hostlist ... " | tee -a $LOGFILE
			$SCRIPTSDIR/urlfilter_on_off.sh --trigger=$webfilter --hostlist=$hostlist | tee -a $LOGFILE
		else
			echo "  * Skipping webfilter status change for $hostlist ..." | tee -a $LOGFILE
		fi
	else
		echo "  * Skipping webfilter status change for $hostlist ..." | tee -a $LOGFILE
	fi

	# kill lession for room
	if [[ "$room" = "yes" && -n "$kill" ]]; then
		roomfile=${roomfile_prefix}`echo -n $r | md5sum | awk '{ print $1 }'`
		if [ -e "$roomfile" ]; then
			# check if exam is active
			if grep -q test_step $roomfile; then
				OIFS="$IFS"
				IFS=","
				for i in `cat $roomfile`; do
					if stringinstring user_id "$i"; then
						user_id=`echo "$i" | awk -F\' '{ print $4 }'`
						break
					fi
				done
				IFS="$OIFS"
				get_login_by_id $user_id
				teacher=$RET
				if check_teacher $teacher; then
					echo "  * WARNING: Finishing test of teacher $teacher in room $r!" | tee -a $LOGFILE
					echo "    For detailed output of sophomorix-teacher see $LOGFILE!"
					sophomorix-teacher --teacher $teacher --room $r --exam --collect 2>> $LOGFILE 1>> $LOGFILE
				fi
			fi
			echo "  * WARNING: I'm killing an active lession in room $r!" | tee -a $LOGFILE
			rm -f $roomfile
		fi
	fi

done

# start nscd if not running
if ! ps ax | grep nscd | grep -v grep &> /dev/null; then
	echo | tee -a $LOGFILE
	/etc/init.d/nscd start | tee -a $LOGFILE
fi

exit_script 0

