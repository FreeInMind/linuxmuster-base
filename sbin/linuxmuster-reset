#!/bin/bash
#
# linuxmuster-reset-rooms
# resets the state of all hosts of a room defined in /etc/linuxmuster/room_defaults
# intranet will be activated for all hosts of a room
#
# 28.01.2008
# Thomas Schmitt <schmitt@lmz-bw.de>
#


# check for linuxmuster-reset-rooms lockfile
locker=/tmp/.linuxmuster-reset-rooms
if [ -e "$locker" ]; then
	echo "Caution! Lockfile $locker detected!"
	echo "Probably there is another linuxmuster-reset-rooms process running!"
	echo "If this is not the case you can safely remove the lockfile $locker"
        echo "and give linuxmuster-reset-rooms another try."
	exit 1
fi
touch $locker
chmod 400 $locker


exit_script() {
	rm -f $locker
	exit 1
}

# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit_script

# source helperfunctions
. $HELPERFUNCTIONS || exit_script


# parsing parameters
getopt $*

usage() {
  echo
  echo "Usage: linuxmuster-reset --room=<roomname>"
  echo "                         --host=<hostname>"
  echo "                         --all"
  echo
  echo "  --room: name of a room to reset defined in $ROOMDEFAULTS"
  echo "  --host: name of a host to reset defined in $ROOMDEFAULTS"
  echo "  --all:  resets all rooms and hosts defined in $ROOMDEFAULTS"
  echo
  exit_script
}

# test parameters
[[ -z "$room" && -z "$host" && -z "$all" ]] && usage
[[ -n "$room" && -n "$all" ]] && usage
[[ -n "$room" && -n "$host" ]] && usage
[[ -n "$host" && -n "$all" ]] && usage


# check if $ROOMDEFAULTS exists
[ -e "$ROOMDEFAULTS" ] || exit_script


# create resetlist
if [ -n "$all" ]; then
	resetlist=`awk '{ print $1 }' $ROOMDEFAULTS | sort`
elif [ -n "$host" ]; then
	resetlist=$host
elif [ -n "$room" ]; then
	resetlist=`awk '{ print $1 }' $ROOMDEFAULTS | grep ^$room | sort`
fi


# check resetlist for valid entries
for r in $resetlist; do

	# skip comments
	[ "${r:0:1}" = "#" ] && continue
	

	# check if room/host is defined in $ROOMDEFAULTS
	if ! grep -qw ^$r $ROOMDEFAULTS; then
		echo "Room or host $r is not defined in $ROOMDEFAULTS! Skipping $r!"
		continue
	fi

	# check if room/host is defined in $WIMPORTDATA
	if ! grep -q $r\; $WIMPORTDATA; then
		echo "Room or host $r is not defined in $WIMPORTDATA! Skipping $r!"
		continue
	fi

	# create cleaned resetlist
	if [ -z "$tmplist" ]; then
		tmplist=$r
	else
		tmplist="$tmplist $r"
	fi

done


# exit if list is emtpy
if [ -z "$tmplist" ]; then
	echo "Found no valid rooms or hosts to reset!"
	exit_script
else
	resetlist=$tmplist
fi


# check for internal firewall
. /etc/default/linuxmuster-base || exit_script
if [ "$START_LINUXMUSTER" != "yes" ]; then
	echo "Internal firewall is deactivated!"
	skip_intra=yes
else
	if ! iptables -L | grep -q "$FIREWALLTEST"; then
		echo "Internal firewall is activated but not running!"
		skip_intra=yes
	fi
fi
[ -z "$skip_intra" ] && echo "Internal firewall is active!"


# check if urlfilter is active
$SCRIPTSDIR/check_urlfilter.sh && uf_active=yes


# processing resetlist
for r in $resetlist; do

	# read status defaults from $ROOMDEFAULTS
	line=`grep ^$r[[:space:]] $ROOMDEFAULTS`
	internet=`echo $line | awk '{ print $2 }'`
	intranet=`echo $line | awk '{ print $3 }'`
	webfilter=`echo $line | awk '{ print $4 }'`

	# check if $r is a room
	if grep -q ^$r\; $WIMPORTDATA; then
		room=yes
		typ=room
	else
		room=no
		typ=host
	fi

	if [ "$room" = "yes" ]; then
		# fetch room's hostlist from $WIMPORTDATA
		hostlist=`grep ^$r\; $WIMPORTDATA | cut -f2 -d\;`
		hostlist=`echo $hostlist | sed -e 's/ /,/g'`
		# skips if hostlist is empty
		if [ -z "$hostlist" ]; then
			echo "No hosts found for room $r! Skipping $r!"
			continue
		fi
	else
		hostlist=$r
	fi

	echo "Processing $typ $r ..."

	# triggers internet access
	if [[ "$internet" = "on" || "$internet" = "off" ]]; then
		echo -n "Changing internet status to $internet for $hostlist ... "
		$SCRIPTSDIR/internet_on_off.sh --trigger=$internet --hostlist=$hostlist
	else
		echo "Skipping internet status change for $hostlist ..."
	fi

	# triggers intranet access if internal firewall is active
	if [ -z "$skip_intra" ]; then
		if [[ "$intranet" = "on" || "$intranet" = "off" ]]; then
			echo -n "Changing intranet status to $intranet for $hostlist ... "
			$SCRIPTSDIR/intranet_on_off.sh --trigger=$intranet --hostlist=$hostlist
		else
			echo "Skipping intranet status change for $hostlist ..."
		fi
	else
		echo "Skipping intranet status change for $hostlist ..."
	fi

	# triggers urlfilter if active
	if [ -n "$uf_active" ]; then
		if [[ "$webfilter" = "on" || "$webfilter" = "off" ]]; then
			echo -n "Changing webfilter status to $webfilter for $hostlist ... "
			$SCRIPTSDIR/urlfilter_on_off.sh --trigger=$webfilter --hostlist=$hostlist
		else
			echo "Skipping webfilter status change for $hostlist ..."
		fi
	else
		echo "Skipping webfilter status change for $hostlist ..."
	fi

done

echo "Done!"

rm -f $locker
