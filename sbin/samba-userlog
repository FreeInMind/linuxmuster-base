#!/bin/bash
#
# logs when users login and logout
# thomas@linuxmuster.net
# 16.04.2013
#

#set -x

# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit 1

# source helperfunctions
. $HELPERFUNCTIONS || exit 1

# parsing parameters
getopt $*

usage() {
  echo
  echo "Usage: samba-userlog --log=<in|out>"
  echo "                     --username=<userlogin>"
  echo "                     --hostname=<hostname or ip address>"
  echo "                     --homedir=<homedirectory>"
  echo
  exit 1
}

# test parameters
[ "$log" != "in" -a "$log" != "out" ] && usage
[ -z "$hostname" ] && usage
[ -z "$username" ] && usage
[ -z "$homedir" ] && usage

# test if hostname is an ip address
if validip $hostname; then
  get_hostname $hostname
  [ -n "$RET" ] && hostname=$RET
fi

# test if username is a hostname (for exams)
get_hostname $username
[ -n "$RET" ] && EXAMMODE=yes


# test for some dirs if account is not a workstation
if [ -z "$EXAMMODE" -a "$log" = "in" ]; then

  # check for teacher and domadmin group member
  check_teacher $username && teacher=yes
  check_admin $username && admin=yes

  # remove obsolete private_html
  [ -f "$homedir/private_html/.htaccess" ] && rm -f $homedir/private_html/.htaccess
  check_empty_dir $homedir/private_html && rm -rf $homedir/private_html

  # public_html only for teachers
  if [ -n "$teacher" -a ! -e "$homedir/public_html" ]; then
    mkdir $homedir/public_html
    chown $username:www-data $homedir/public_html
    chmod 2750 $homedir/public_html
  fi

  # link to students home for teachers and administrators
  if [ -n "$teacher" -o -n "$admin" ]; then
    if [ -n "$STUDENTSLINK" -a -n "$STUDENTSHOME" -a -d "$STUDENTSHOME" ]; then
      [ -e "$homedir/$STUDENTSLINK" ] || ln -s $STUDENTSHOME $homedir/$STUDENTSLINK
    fi
  else
    if [ -n "$STUDENTSLINK" ]; then
      [ -L "$homedir/$STUDENTSLINK" ] && rm $homedir/$STUDENTSLINK
    fi
  fi

  # link to share dirs for administrator
  if [ -n "$admin" ]; then
    if [ -n "$SHARELINK" -a -n "$SHAREHOME" -a -d "$SHAREHOME" ]; then
      [ -e "$homedir/$SHARELINK" ] || ln -s $SHAREHOME $homedir/$SHARELINK
    fi
  else
    if [ -n "$SHARELINK" ]; then
      [ -L "$homedir/$SHARELINK" ] && rm $homedir/$SHARELINK
    fi
  fi

fi

# change host password if user is a host (more security for exams, see #88)
if [ -n "$EXAMMODE" -a "$log" = "in" ]; then
 password="$(pwgen -s 24 1)"
 sophomorix-passwd -u "$username" --pass "$password" &> /dev/null
 [ "$hostname" != "$username" ] && sophomorix-passwd -u "$hostname" --pass "$password" &> /dev/null
fi

# check if there are valid logins in cache file
check_logins() {

  [ -s "$cachefile" ] || return

  for i in `cat $cachefile`; do

    if ! smbstatus -b -d 0 -u $i | grep -qw $i | grep -qw $hostname; then

      grep -vw $i $cachefile > $cachefile.tmp
      mv $cachefile.tmp $cachefile

    fi

  done

} # check_logins

# only if host account exists
if check_id $hostname; then

  # create cachefile and lock cachefile
  [ -d "$LOGINCACHE" ] || mkdir -p $LOGINCACHE
  cachefile=$LOGINCACHE/$hostname
  locker=/tmp/.samba-userlog_${hostname}.lock
  touch $cachefile || cancel "Cannot create $cachefile!"
  lockfile -l 5 $locker

  if [ "$log" = "in" ]; then

    check_logins

    if ! grep -qw $username $cachefile; then
      echo $username >> $cachefile
      chmod 644 $cachefile
    fi

    prep=on

  else

    grep -vw $username $cachefile > $cachefile.tmp
    mv $cachefile.tmp $cachefile

    if [ -s "$cachefile" ]; then
      chmod 644 $cachefile
    else
      rm -f $cachefile
    fi

    prep=from

  fi

  rm -f $locker

fi


# log to userlogins
get_ip $hostname
ip=$RET
get_realname $username
realname=${RET# }
get_pgroup $username
pgroup=${RET# }
locker=/tmp/.samba-userlog.lock
lockfile -l 5 $locker
echo "$DATETIME: $realname ($username, $pgroup) logs $log $prep $hostname ($ip)" >> $USERLOG

echo "log$log of user $username $prep host $hostname successfully logged!"

# source custom login and logout scripts
export USERNAME="$username"
export HOMEDIR="$homedir"
export HOSTNAME="$hostname"
case $log in
 in) run-parts "$PREEXECD" ;;
 out) run-parts "$POSTEXECD" ;;
 *) ;;
esac

rm -f $locker

exit 0
