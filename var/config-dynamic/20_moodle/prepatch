if [ "$1" = "--first" ]; then
  # first time or fresh install

  # test if moodle is correctly configured
  if ! dpkg -l | grep moodle | grep ^ii; then
    dpkg --configure moodle
  fi

  # drop horde db on first time install
  dropdb -U postgres moodle
  dropuser -U postgres moodle

  # create new db and user
  createuser -U postgres -A -D moodle
  createdb -U postgres -O moodle -E UTF8 moodle

  # create random password
  randompw=`pwgen -s 8 1`

  # set random password for db access
  psql -U postgres -d template1 -qc "ALTER USER moodle WITH PASSWORD '"$randompw"';"

  # patch dbpass & admin login
  sed -e "s/\$CFG->dbpass =.*/\$CFG->dbpass = \'$randompw\';/
          s/\$CFG->wwwroot =.*/\$CFG->wwwroot = \'http:\/\/$servername.$domainname\/moodle\';/" -i /etc/moodle/config.php

  # unset random password
  unset randompw

  # create upload virus quarantine dir
  [ -d /var/lib/moodle/quarantine ] || mkdir -p /var/lib/moodle/quarantine
  chown www-data:www-data /var/lib/moodle/quarantine

else

  # prevent psql file from being patched
  mv moodle.psql.target moodle.psql.target.nopatch

  # patch altered servername or domainname if necessary
  if [[ "$servername" != "$servername_old" || "$domainname" != "$domainname_old" ]]; then

    echo "Backing up moodle db to $BACKUPDIR/moodle/moodle-dump-$DATETIME.gz ..."
    [ -d "$BACKUPDIR/moodle" ] || mkdir -p $BACKUPDIR/moodle
    pg_dump -U postgres -f /var/tmp/moodle-dump -F p -C moodle
    gzip -c /var/tmp/moodle-dump > $BACKUPDIR/moodle/moodle-dump-$DATETIME.gz
    rm /var/tmp/moodle-dump

    if grep -q "http://$servername_old.$domainname_old/" /etc/moodle/config.php; then

      backup_file /etc/moodle/config.php

      # patch new servername and domainname in config.php
      sed -e "s/\$CFG->wwwroot = 'http:\/\/$servername_old.$domainname_old\//\$CFG->wwwroot = 'http:\/\/$servername.$domainname\//" -i /etc/moodle/config.php

    fi

    # patch moodle db with new servername.domainname
    # table mdl_config
    unset res
    res=`psql -U postgres -d moodle -qtc "SELECT id FROM mdl_config WHERE value LIKE '%"${servername_old}.${domainname_old}"%';"`
    if [ -n "$res" ]; then
      for i in $res; do
        oldvalue=`psql -U postgres -d moodle -qtc "SELECT value FROM mdl_config WHERE id = '"$i"';"`
        strip_spaces $oldvalue
        newvalue=`echo "$RET" | sed -e "s/$servername_old.$domainname_old/$servername.$domainname/"`
	echo "Patching moodle db table mdl_config id $i with value $newvalue ..."
        psql -U postgres -d moodle -qc "UPDATE mdl_config SET value = '$newvalue' WHERE id = '"$i"';"
      done
    fi
    # table mdl_user
    unset res
    res=`psql -U postgres -d moodle -qtc "SELECT id FROM mdl_user WHERE email LIKE '%"${servername_old}.${domainname_old}"';"`
    if [ -n "$res" ]; then
      for i in $res; do
        oldvalue=`psql -U postgres -d moodle -qtc "SELECT email FROM mdl_user WHERE id = '"$i"';"`
        strip_spaces $oldvalue
        newvalue=`echo "$RET" | sed -e "s/$servername_old.$domainname_old/$servername.$domainname/"`
	echo "Patching moodle db table mdl_user id $i with value $newvalue ..."
        psql -U postgres -d moodle -qc "UPDATE mdl_user SET email = '$newvalue' WHERE id = '"$i"';"
      done
    fi

  fi

  # patch altered domainname and update moodle db with basedn if necessary
  if [ "$domainname" != "$domainname_old" ]; then

    # patch basedn in moodle db
    echo "Patching moodle db table mdl_config with base dn $basedn ..."
    psql -U postgres -d moodle -qc "UPDATE mdl_config SET value = 'cn=teachers,ou=groups,"$basedn"' WHERE name = 'ldap_creators';"
    psql -U postgres -d moodle -qc "UPDATE mdl_config SET value = 'ou=accounts,"$basedn"' WHERE name = 'ldap_contexts';"

    # patch moodle db with new domainname
    # table mdl_config
    unset res
    res=`psql -U postgres -d moodle -qtc "SELECT id FROM mdl_config WHERE value LIKE '%"${domainname_old}"%';"`
    if [ -n "$res" ]; then
      for i in $res; do
        oldvalue=`psql -U postgres -d moodle -qtc "SELECT value FROM mdl_config WHERE id = '"$i"';"`
        strip_spaces $oldvalue
        newvalue=`echo "$RET" | sed -e "s/$domainname_old/$domainname/"`
        echo "Patching moodle db table mdl_config id $i with value $newvalue ..."
        psql -U postgres -d moodle -qc "UPDATE mdl_config SET value = '$newvalue' WHERE id = '"$i"';"
      done
    fi
    # table mdl_user
    unset res
    res=`psql -U postgres -d moodle -qtc "SELECT id FROM mdl_user WHERE email LIKE '%"${domainname_old}"';"`
    if [ -n "$res" ]; then
      for i in $res; do
        oldvalue=`psql -U postgres -d moodle -qtc "SELECT email FROM mdl_user WHERE id = '"$i"';"`
        strip_spaces $oldvalue
        newvalue=`echo "$RET" | sed -e "s/$domainname_old/$domainname/"`
	echo "Patching moodle db table mdl_user id $i with value $newvalue ..."
        psql -U postgres -d moodle -qc "UPDATE mdl_user SET email = '$newvalue' WHERE id = '"$i"';"
      done
    fi

  fi

fi
