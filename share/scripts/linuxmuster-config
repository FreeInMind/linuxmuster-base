#!/bin/sh

# Source debconf library.
. /usr/share/debconf/confmodule

PRIORITY="critical"

# source linuxmuster defaults
. /usr/share/linuxmuster/config/dist.conf || exit 1

# source helperfunctions
. $HELPERFUNCTIONS || exit 1


# source oldvalues if present
if [ -e $OLDVALUES ]; then
  . $OLDVALUES
  oldvalues=yes
fi

if [ "$1" = "--first" ]; then
  # intro
  db_fset linuxmuster-base/intro seen false
  db_input $PRIORITY linuxmuster-base/intro || true
  db_go
fi


# data for certificates and workgroup
for i in country state location schoolname workgroup; do
  while [ -z "$INPUT" ]; do
    db_fset linuxmuster-base/$i seen false
    db_input $PRIORITY linuxmuster-base/$i || true
    db_go
    db_get linuxmuster-base/$i || true
    INPUT=$RET
    if [ "$i" = "schoolname" ]; then
      db_set shared/organization $INPUT || true
    fi
    if [ "$i" = "workgroup" ]; then
      WORKGROUP=${INPUT//[äöüßÄÖÜ ]/}
      db_set linuxmuster-base/$i $WORKGROUP || true
    fi
  done
  unset INPUT
done


# intern network configuration
# servername
while ! (expr match "$SERVERNAME" '\([a-z0-9-]\+$\)'); do
  db_fset linuxmuster-base/servername seen false
  db_input $PRIORITY linuxmuster-base/servername || true
  db_go
  db_get linuxmuster-base/servername || true
  SERVERNAME=$RET
done


# domainname
while ! validdomain "$DOMAINNAME"; do
  db_fset linuxmuster-base/domainname seen false
  db_input $PRIORITY linuxmuster-base/domainname || true
  db_go
  db_get linuxmuster-base/domainname || true
  DOMAINNAME=$RET
done


# intern subnet range
db_fset linuxmuster-base/internsubrange seen false
db_input $PRIORITY linuxmuster-base/internsubrange || true
db_go


# extern network configuration
# dsl sub menu
dslconfig() {
  db_fset linuxmuster-base/dsluser seen false
  db_input $PRIORITY linuxmuster-base/dsluser || true
  db_go
  db_fset linuxmuster-base/dslpasswd seen false
  db_input $PRIORITY linuxmuster-base/dslpasswd || true
  db_go
}


# dns forwarders
dnsconfig() {
  while true; do
    db_fset linuxmuster-base/dnsforwarders seen false
    db_input $PRIORITY linuxmuster-base/dnsforwarders || true
    db_go
    db_get linuxmuster-base/dnsforwarders || true
    DNSFORWARDERS=$RET
    BREAK=true
    for i in $DNSFORWARDERS; do
      if ! validip "$i"; then BREAK=false; fi
    done
    if [ "$BREAK" = "true" ]; then break; fi
  done
}


# router sub menu
routerconfig() {
  for i in externip externmask gatewayip; do
    IP=""
    while ! validip "$IP"; do
      db_fset linuxmuster-base/$i seen false
      db_input $PRIORITY linuxmuster-base/$i || true
      db_go
      db_get linuxmuster-base/$i || true
      IP=$RET
      if [ "$i" = "externmask" ]; then break; fi
    done
  done
  dnsconfig
}


# extern network sub menu
externconfig() {
  db_fset linuxmuster-base/externtype seen false
  db_input $PRIORITY linuxmuster-base/externtype || true
  db_go
  db_get linuxmuster-base/externtype || true
  case $RET in
    static)
      routerconfig
      ;;
    pppoe)
      dslconfig
      ;;
    dhcp)
      ;;
  esac
}


# firewall
db_fset linuxmuster-base/fwconfig seen false
db_input $PRIORITY linuxmuster-base/fwconfig || true
db_go
db_get linuxmuster-base/fwconfig || true
fwconfig=$RET
# check if fwconfig has been modified
if [ "$oldvalues" = "yes" ]; then
  [ "$fwconfig" = "$fwconfig_old" ] || update_fw=yes
fi
# configure extern network if fwconfig is integrated
[ "$fwconfig" = "integrated" ] && externconfig


# smtp relay
while ! validdomain "$SMTPRELAY"; do
  db_fset linuxmuster-base/smtprelay seen false
  db_input $PRIORITY linuxmuster-base/smtprelay || true
  db_go
  db_get linuxmuster-base/smtprelay || true
  SMTPRELAY=$RET
  if [ "$SMTPRELAY" = "" ]; then break; fi
done


# admin passwords
if [ "$1" = "--first" ]; then

	# root
	STATE=1
	while [ "$STATE"  != 0 ]; do

		case "$STATE" in

			1)
				db_fset linuxmuster-base/rootpw seen false
				db_input $PRIORITY linuxmuster-base/rootpw || true
				db_go
				db_get linuxmuster-base/rootpw || true
				[ -n "$RET" ] && STATE=2
				unset RET
			;;

			2)
				db_fset linuxmuster-base/rootpw_confirm seen false
				db_input $PRIORITY linuxmuster-base/rootpw_confirm || true
				db_go
				db_get linuxmuster-base/rootpw_confirm || true
				if [ -n "$RET" ]; then
					CONFIRM=$RET
					db_get linuxmuster-base/rootpw || true
					if [ "$RET" = "$CONFIRM" ]; then
						STATE=0
						echo root:$RET | chpasswd
					else
						STATE=1
					fi
					unset RET
					unset CONFIRM
					db_set linuxmuster-base/rootpw "" || true
					db_set linuxmuster-base/rootpw_confirm "" || true
				fi
			;;

		esac

	done

	# administrator
	STATE=1
	while [ "$STATE"  != 0 ]; do

		case "$STATE" in

			1)
				db_fset linuxmuster-base/adminpw seen false
				db_input $PRIORITY linuxmuster-base/adminpw || true
				db_go
				db_get linuxmuster-base/adminpw || true
				[ -n "$RET" ] && STATE=2
				unset RET
			;;

			2)
				db_fset linuxmuster-base/adminpw_confirm seen false
				db_input $PRIORITY linuxmuster-base/adminpw_confirm || true
				db_go
				db_get linuxmuster-base/adminpw_confirm || true
				if [ -n "$RET" ]; then
					CONFIRM=$RET
					db_get linuxmuster-base/adminpw || true
					if [ "$RET" = "$CONFIRM" ]; then
						STATE=0
					else
						STATE=1
						db_set linuxmuster-base/adminpw "" || true
					fi
					unset RET
					unset CONFIRM
					db_set linuxmuster-base/adminpw_confirm "" || true
				fi
			;;

		esac

	done

	# pgmadmin
	STATE=1
	while [ "$STATE"  != 0 ]; do

		case "$STATE" in

			1)
				db_fset linuxmuster-base/pgmadminpw seen false
				db_input $PRIORITY linuxmuster-base/pgmadminpw || true
				db_go
				db_get linuxmuster-base/pgmadminpw || true
				[ -n "$RET" ] && STATE=2
				unset RET
			;;

			2)
				db_fset linuxmuster-base/pgmadminpw_confirm seen false
				db_input $PRIORITY linuxmuster-base/pgmadminpw_confirm || true
				db_go
				db_get linuxmuster-base/pgmadminpw_confirm || true
				if [ -n "$RET" ]; then
					CONFIRM=$RET
					db_get linuxmuster-base/pgmadminpw || true
					if [ "$RET" = "$CONFIRM" ]; then
						STATE=0
					else
						STATE=1
						db_set linuxmuster-base/pgmadminpw "" || true
					fi
					unset RET
					unset CONFIRM
					db_set linuxmuster-base/pgmadminpw_confirm "" || true
				fi
			;;

		esac

	done

	# wwwadmin
	STATE=1
	while [ "$STATE"  != 0 ]; do

		case "$STATE" in

			1)
				db_fset linuxmuster-base/wwwadminpw seen false
				db_input $PRIORITY linuxmuster-base/wwwadminpw || true
				db_go
				db_get linuxmuster-base/wwwadminpw || true
				[ -n "$RET" ] && STATE=2
				unset RET
			;;

			2)
				db_fset linuxmuster-base/wwwadminpw_confirm seen false
				db_input $PRIORITY linuxmuster-base/wwwadminpw_confirm || true
				db_go
				db_get linuxmuster-base/wwwadminpw_confirm || true
				if [ -n "$RET" ]; then
					CONFIRM=$RET
					db_get linuxmuster-base/wwwadminpw || true
					if [ "$RET" = "$CONFIRM" ]; then
						STATE=0
					else
						STATE=1
						db_set linuxmuster-base/wwwadminpw "" || true
					fi
					unset RET
					unset CONFIRM
					db_set linuxmuster-base/wwwadminpw_confirm "" || true
				fi
			;;

		esac

	done

fi # admin passwords


# ipcop password
if [[ "$1" = "--first" || "$update_fw" = "yes" ]]; then

	STATE=1
	while [ "$STATE"  != 0 ]; do

		case "$STATE" in

			1)
				db_fset linuxmuster-base/ipcoppw seen false
				db_input $PRIORITY linuxmuster-base/ipcoppw || true
				db_go
				db_get linuxmuster-base/ipcoppw || true
				[ -n "$RET" ] && STATE=2
				unset RET
			;;

			2)
				db_fset linuxmuster-base/ipcoppw_confirm seen false
				db_input $PRIORITY linuxmuster-base/ipcoppw_confirm || true
				db_go
				db_get linuxmuster-base/ipcoppw_confirm || true
				if [ -n "$RET" ]; then
					CONFIRM=$RET
					db_get linuxmuster-base/ipcoppw || true
					if [ "$RET" = "$CONFIRM" ]; then
						STATE=0
					else
						STATE=1
						db_set linuxmuster-base/ipcoppw "" || true
					fi
					unset RET
					unset CONFIRM
					db_set linuxmuster-base/ipcoppw_confirm "" || true
				fi
			;;

		esac

	done

fi # ipcop password


# assign nics with extern, intern, wlan, dmz interfaces
assign_nics

# important: close debconf database
db_stop
